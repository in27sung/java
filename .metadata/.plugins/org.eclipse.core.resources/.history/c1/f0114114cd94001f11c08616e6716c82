package interface_;

public class Ex4 {
	
	public static void main(String[] args) {
		// 3. 서로 상속 관계가 없는 클래스간의 인터페이스를 통한 상속 관계 부여 
		// -> 다형성 확장 
		
		noRelationship();
		
	} //main() 끝 
	
	public static void noRelationship() {
//		NoteBookPc notebook = new NoteBookPc();
//		notebook.charge();
//		
//		SmartPhone smartPhone = new SmartPhone();
//		smartPhone.charge();
		
		// 두 개의 인스턴스를 하나의 배열로 관리해야할 경우 
		// NoteBookPc 와 SmartPhone 의 공통 타입은 Object 타입 밖에 없음
		Object[] objArr = {new NoteBookPc(), new SmartPhone()};
		
		// 반복문을 사용하여 배열 크기만큼 반복 
		for(int i = 0; i < objArr.length; i++) {
//			objArr[i].charge();
			// -> 참조 영역 축소로 인해 Object 타입으로 charge() 메서드 호출 불가
			
			// instanceof 연산자를 사용해서 NoteBookPc 와 SmartPhone 타입 판별
			// -> 다운캐스팅을 통해 각 인스턴스를 따로 접근해야 함 
			// 접근하고자 하는 charge() 메서드는 각 클래스에서 직접 정의한 
			//  인스턴스 멤버 메서드이기 때문
			
			if(objArr[i] instanceof NoteBookPc) {
				// Down Casting
				NoteBookPc notebook = (NoteBookPc)objArr[i];
				notebook.charge();
			} else if (objArr[i] instanceof SmartPhone) {
				// Down Casting
				SmartPhone smartPhone = (SmartPhone)objArr[i];
				smartPhone.charge();
			}
			//
		} 
		
	} // noRelationship()
	public void hasRelationship() {
		//인터페이스를 사용하여 공통된 멤버를 갖는 속성 관계를 부여할 경우 
		// 해당 인터페이스 타입을 다운캐스팅 할 필요없이 
		// 업캐스팅 된 상태 그대로 멤버에 접근 가능!
		// -> 다형성으로 인한 코드 절약 
		
		Chargeable c = new NoteBookPc2(); //NoteBookPc2 -> Chargeable 업캐스팅
		c = new SmartPhone2(); // SmartPhone2 -> Chargeable 업캐스팅
	}

}// Ex4 클래스 끝

// Object 클래스 외에 슈퍼클래스가 없는 NoteBookPc 와 SmartPhone 의 
// 공통 인터페이스 Chargeable 인터페이스 정의 

interface Chargeable {
	
}

class NotebookPc2 extends Pc implements Chargeable {
	
}

// =================================================================

class Pc {}

class NoteBookPc extends Pc {
	public void charge() {
		System.out.println("노트북 충전 중...");
	}
}

class HandPhone {}

class SmartPhone extends HandPhone {
	public void charge() {
		System.out.println("스마트폰 충전 중...");
	}
}