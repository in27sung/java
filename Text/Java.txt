[Object oriented programming(OOP)]

- 자바는 객체지향 프로그래밍 언어 중의 하나로 우선 '객체'에 대한 이해도를 높여야 함 

Procedural programming 절차지향 프로그래밍
- 코드의 처음부터 마지막까지 위에서부터 아래로 명령이 수행되는 형태
- 특정한 코드가 반복되어 수행된다면 프로그램이 커질뿐 아니라 변경이
	 되면 모든 부분을 수정해야하는일이 발생
- Class: 프로그램 내에서 사용되는 연관성이 있는 변수와 동작(method)들을 모아 하나의 개념으로 만들어 놓은것 
				현실세계의 설계도라고 할 수 있으며 이를 통해 객체를 생성하게 됨. 

OOP
- 프로그램은 여러가지 변수와 명령어를 통해 다양한 동작들을 수행
- 프로그램이 커짐에 따라 프로그래밍을 하는 입장에서는 좀 더 효율적인 방법의 프로그래밍이 필요하게 됨
- 프로그램 내에서 사용되는 연관성이 있는 변수와 동작(method)들을 모아 하나의 개념으로 만들었는데 이를 'Class'라고 함
- 클래스는 현실세계의 설계도라고 할 수 있으며 이를 통해 객체를 생성하게 됨
- OOP는 연관된 속성(변수)과 동작(method)을 클래스 형태로 설계하고 이를 통해 여러개의 객체를 생성하여 필요한 부품을 만들고 이를 조립하는
거대한 프로그램이라고 볼 수 있음

주체: 객체의 반대, 나 
객체: 주체가 바라보는 (파악하는) 모든 대상 (사물, 개념) 등

객체의 구성요소: 속성(veriable)/ attribute
객체의 동작(기능): method 

분석 과정
1. 공통적인 요소만 뽑아내는 방법(= 일반화)
2. 공통된 틀을 만들고, 각 특징을 포함해서 분석하는 방법 (= 구체화)

,ex) 학생
초등학생, 중학생, 고등학생, 대학생 

분석 단계를 거치면 분석 결과를 통해 설계도를 만들어냄
=> 자바에서는 클래스의 정의 단계라고 볼 수 있음

객체지향 프로그래밍의 절차
1. 요구사항 분석
2. 클래스의 설계
3. 설계된 클래스로부터 객체 생성(인스턴스 생성)	

Class: 객체에 대한 속성과 기능을 코드로 구현한 것 ex)Define a class 
객체의
특성(property), 속성(attribute), 멤버변수(memebr variable)

Class(static code)  ----->    instance(dynamic memory)
									생성(인스턴스 화)
									
Package: source의 계층 구조

function: 하나의 기능을 수행하는 일련의 코드
				-중복되는 기능은 함수로 구현하여 함수를 호출하여 사용함
				
void: means that this method does not have a return value.

static means that the method belongs to the Main class and not an object of the Main calss.

stack memory: 함수가 사용하는 메모리 and 지역변수// 메인함수가 끝나면 메모리가 사라짐 LIFO(Last in First out)
heap memory: instance가 생성*사용 하는 메모리(dynamic memory) // new라는 키워드로 생성되며 garbege collector가 없애줌(java)


		Stack 													Heap
+-------------+									+-------------+
|				   			  |									|				   			  |
|		variable		  |				->				|    	instance  	  |
|	  (주소저장)	  |						|				   			  |
|					     	  |									|				   			  |
|						 	  |									|				   			  |
+-------------+								   +--------------+
Garbege collector로 인해 수거됨 (service by java)

Constructor(생성자): 클래스와 이름이 같음, 반환타입x, new 키워드로 호출, 상속되지 않음 // 책 참조하기 

<Method>

	modifiers className (argumentList) {
		statements 
	}
default constructor: java가 기본으로 생성해주는 생성자 no parameter


Reference data type(참조 자료형)

Primitivie data type: int, long, float, double etc
Reference data type: String(JDK), Date(JDK), Student etc 

JDK Library 참조 












각 클래스의 여러 객체를 만들어 나눔 
MVC(분업)

[1차 프로젝트 주제]

1) 영수증 기반 리워드 및 재구매 추천 서비스 
2) 건강관리를 위한 식품 영양정보 분석 서비스
3) 바코드/QR코드를 활용한 실시간 재고관리 모니터링 서비스 




